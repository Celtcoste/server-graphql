// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Application string

const (
	ApplicationInfluencer Application = "INFLUENCER"
	ApplicationAnnouncer  Application = "ANNOUNCER"
	ApplicationPartners   Application = "PARTNERS"
	ApplicationManager    Application = "MANAGER"
)

var AllApplication = []Application{
	ApplicationInfluencer,
	ApplicationAnnouncer,
	ApplicationPartners,
	ApplicationManager,
}

func (e Application) IsValid() bool {
	switch e {
	case ApplicationInfluencer, ApplicationAnnouncer, ApplicationPartners, ApplicationManager:
		return true
	}
	return false
}

func (e Application) String() string {
	return string(e)
}

func (e *Application) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Application(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Application", str)
	}
	return nil
}

func (e Application) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleWaiting       Role = "WAITING"
	RoleValidated     Role = "VALIDATED"
	RoleBanned        Role = "BANNED"
	RoleResetPassword Role = "RESET_PASSWORD"
	RoleAdmin         Role = "ADMIN"
	RoleStaff         Role = "STAFF"
)

var AllRole = []Role{
	RoleWaiting,
	RoleValidated,
	RoleBanned,
	RoleResetPassword,
	RoleAdmin,
	RoleStaff,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleWaiting, RoleValidated, RoleBanned, RoleResetPassword, RoleAdmin, RoleStaff:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
